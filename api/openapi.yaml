openapi: 3.0.3
info:
  contact:
    email: support@cybrid.app
    name: Cybrid Support
  description: "# Cybrid API documentation\n\nWelcome to Cybrid, an all-in-one crypto\
    \ platform that enables you to easily **build** and **launch** white-label crypto\
    \ products or services.\n\nIn these documents, you'll find details on how our\
    \ REST API operates and generally how our platform functions.\n\nIf you're looking\
    \ for our UI SDK Widgets for Web or Mobile (iOS/Android), generated API clients,\
    \ or demo applications, head over to our [Github repo](https://github.com/Cybrid-app).\n\
    \n\U0001f4a1 We recommend bookmarking the [Cybrid LinkTree](https://linktr.ee/cybridtechnologies)\
    \ which contains many helpful links to platform resources.\n\n## Getting Started\n\
    \nThis is Cybrid's public interactive API documentation, which allows you to fully\
    \ test our APIs. If you'd like to use a different tool to exercise our APIs, you\
    \ can download the [Open API 3.0 yaml](https://bank.sandbox.cybrid.app/api/schema/v1/swagger.yaml)\
    \ for import.\n\nIf you're new to our APIs and the Cybrid Platform, follow the\
    \ below guides to get set up and familiar with the platform:\n\n1. [Understanding\
    \ the Platform](https://kb.cybrid.xyz/understanding-the-platform)\n2. [Getting\
    \ Started in the Cybrid Sandbox](https://kb.cybrid.xyz/getting-started-guide)\n\
    3. [Getting Ready for Trading](https://kb.cybrid.xyz/getting-ready-for-trading)\n\
    4. [Running the Web Demo App](https://kb.cybrid.xyz/locally-running-the-web-demo-app)\
    \ (or, alternatively, [Testing with Hosted Web Demo App](https://kb.cybrid.xyz/testing-with-hosted-web-demo-app))\n\
    \nIn [Getting Started in the Cybrid Sandbox](https://kb.cybrid.xyz/getting-started-guide),\
    \ we walk you through how to use the [Cybrid Sandbox](https://id.sandbox.cybrid.app/)\
    \ to create a test bank and generate API keys. In [Getting Ready for Trading](https://kb.cybrid.xyz/getting-ready-for-trading),\
    \ we walk through creating customers, customer identities, accounts, as well as\
    \ executing quotes and trades.\n\nIf you've already run through the first two\
    \ guides, you can follow the [Running the Web Demo App](https://kb.cybrid.xyz/locally-running-the-web-demo-app)\
    \ guide to test our web SDK with your sandbox `bank` and `customer`.\n\n## Working\
    \ with the Cybrid Platform\n\nThere are three primary ways you can interact with\
    \ the Cybrid platform:\n\n1. Directly via our RESTful API (this documentation)\n\
    2. Using our API clients available in a variety of languages ([Angular](https://github.com/Cybrid-app/cybrid-api-bank-angular),\
    \ [Java](https://github.com/Cybrid-app/cybrid-api-bank-java), [Kotlin](https://github.com/Cybrid-app/cybrid-api-bank-kotlin),\
    \ [Python](https://github.com/Cybrid-app/cybrid-api-bank-python), [Ruby](https://github.com/Cybrid-app/cybrid-api-bank-ruby),\
    \ [Swift](https://github.com/Cybrid-app/cybrid-api-bank-swift) or [Typescript](https://github.com/Cybrid-app/cybrid-api-bank-typescript))\n\
    3. Integrating a platform specific SDK ([Web](https://github.com/Cybrid-app/cybrid-sdk-web),\
    \ [Android](https://github.com/Cybrid-app/cybrid-sdk-android), [iOS](https://github.com/Cybrid-app/cybrid-sdk-ios))\n\
    \nOur complete set of APIs allows you to manage resources across three distinct\
    \ areas: your `Organization`, your `Banks` and your `Identities`. For most of\
    \ your testing and interaction you'll be using the `Bank` API, which is where\
    \ the majority of APIs reside.\n\n*The complete set of APIs can be found on the\
    \ following pages:*\n\n| API                                                 \
    \             | Description                                                 |\n\
    |------------------------------------------------------------------|-------------------------------------------------------------|\n\
    | [Organization API](https://organization.sandbox.cybrid.app/api/schema/swagger-ui)\
    \   | APIs to manage organizations                                |\n| [Bank API](https://bank.sandbox.cybrid.app/api/schema/swagger-ui)\
    \                   | APIs to manage banks (and all downstream customer activity)\
    \ |\n| [Identities API](https://id.sandbox.cybrid.app/api/schema/swagger-ui) \
    \                      | APIs to manage organization and bank identities     \
    \        |\n\nFor questions please contact [Support](mailto:support@cybrid.xyz)\
    \ at any time for assistance, or contact the [Product Team](mailto:product@cybrid.xyz)\
    \ for product suggestions.\n\n## Authenticating with the API\n\nThe Cybrid Platform\
    \ uses OAuth 2.0 Bearer Tokens to authenticate requests to the platform. Credentials\
    \ to create `Organization` and `Bank` tokens can be generated via the [Cybrid\
    \ Sandbox](https://id.sandbox.cybrid.app). Access tokens can be generated for\
    \ a `Customer` as well via the [Cybrid IdP](https://id.sandbox.cybrid.app) as\
    \ well.\n\nAn `Organization` access token applies broadly to the whole Organization\
    \ and all of its `Banks`, whereas, a `Bank` access token is specific to an individual\
    \ Bank. `Customer` tokens, similarly, are scoped to a specific customer in a bank.\n\
    \nBoth `Organization` and `Bank` tokens can be created using the OAuth Client\
    \ Credential Grant flow. Each Organization and Bank has its own unique `Client\
    \ ID` and `Secret` that allows for machine-to-machine authentication.\n\nA `Bank`\
    \ can then generate `Customer` access tokens via API using our [Identities API](https://id.sandbox.cybrid.app/api/schema/swagger-ui).\n\
    \n<font color=\"orange\">**⚠️ Never share your Client ID or Secret publicly or\
    \ in your source code repository.**</font>\n\nYour `Client ID` and `Secret` can\
    \ be exchanged for a time-limited `Bearer Token` by interacting with the Cybrid\
    \ Identity Provider or through interacting with the **Authorize** button in this\
    \ document.\n\nThe following curl command can be used to quickly generate a `Bearer\
    \ Token` for use in testing the API or demo applications.\n\n```\n# Example request\
    \ when using Bank credentials\ncurl -X POST https://id.sandbox.cybrid.app/oauth/token\
    \ -d '{\n    \"grant_type\": \"client_credentials\",\n    \"client_id\": \"<Your\
    \ Client ID>\",\n    \"client_secret\": \"<Your Secret>\",\n    \"scope\": \"\
    banks:read banks:write bank_applications:execute accounts:read accounts:execute\
    \ customers:read customers:write customers:execute prices:read quotes:execute\
    \ quotes:read trades:execute trades:read transfers:execute transfers:read external_bank_accounts:read\
    \ external_bank_accounts:write external_bank_accounts:execute external_wallets:read\
    \ external_wallets:execute workflows:read workflows:execute deposit_addresses:read\
    \ deposit_addresses:execute deposit_bank_accounts:read deposit_bank_accounts:execute\"\
    \n  }' -H \"Content-Type: application/json\"\n\n# When using Organization credentials\
    \ set `scope` to 'organizations:read organizations:write organization_applications:execute\
    \ banks:read banks:write banks:execute bank_applications:execute users:read users:execute\
    \ customers:read accounts:read prices:read quotes:execute quotes:read trades:execute\
    \ trades:read transfers:read transfers:execute external_bank_accounts:read external_wallets:read\
    \ workflows:read deposit_addresses:read deposit_bank_accounts:read'\n```\n<font\
    \ color=\"orange\">**⚠️ Note: The above curl will create a bearer token with full\
    \ scope access. Delete scopes if you'd like to restrict access.**</font>\n\n##\
    \ Authentication Scopes\n\nThe Cybrid platform supports the use of scopes to control\
    \ the level of access a token is limited to. Scopes do not grant access to resources;\
    \ instead, they provide limits, in support of the least privilege principal.\n\
    \nThe following scopes are available on the platform and can be requested when\
    \ generating either an Organization, Bank or Customer token. Generally speaking,\
    \ the _Read_ scope is required to read and list resources, the _Write_ scope is\
    \ required to update a resource and the _Execute_ scope is required to create\
    \ a resource.\n\n| Resource              | Read scope (Token Type)           \
    \                         | Write scope (Token Type)                      | Execute\
    \ scope (Token Type)                       |\n|-----------------------|------------------------------------------------------------|-----------------------------------------------|--------------------------------------------------|\n\
    | Account               | accounts:read (Organization, Bank, Customer)       \
    \        |                                               | accounts:execute (Bank,\
    \ Customer)                |\n| Bank                  | banks:read (Organization,\
    \ Bank)                            | banks:write (Organization, Bank)        \
    \      | banks:execute (Organization)                     |\n| Customer      \
    \        | customers:read (Organization, Bank, Customer)              | customers:write\
    \ (Bank, Customer)              | customers:execute (Bank)                   \
    \      |\n| Deposit Address       | deposit_addresses:read (Organization, Bank,\
    \ Customer)      | deposit_addresses:write (Bank, Customer)      | deposit_addresses:execute\
    \ (Bank, Customer)       |\n| External Bank Account | external_bank_accounts:read\
    \ (Organization, Bank, Customer) | external_bank_accounts:write (Bank, Customer)\
    \ | external_bank_accounts:execute (Bank, Customer)  |\n| External Wallet    \
    \   | external_wallet:read (Organization, Bank, Customer)        |           \
    \                                    | external_wallet:execute (Bank, Customer)\
    \         |\n| Organization          | organizations:read (Organization)     \
    \                     | organizations:write (Organization)            |      \
    \                                            |\n| User                  | users:read\
    \ (Organization)                                  |                          \
    \                     | users:execute (Organization)                     |\n|\
    \ Price                 | prices:read (Bank, Customer)                       \
    \        |                                               |                   \
    \                               |\n| Quote                 | quotes:read (Organization,\
    \ Bank, Customer)                 |                                          \
    \     | quotes:execute (Organization, Bank, Customer)    |\n| Trade          \
    \       | trades:read (Organization, Bank, Customer)                 |       \
    \                                        | trades:execute (Organization, Bank,\
    \ Customer)    |\n| Transfer              | transfers:read (Organization, Bank,\
    \ Customer)              |                                               | transfers:execute\
    \ (Organization, Bank, Customer) |\n| Workflow              | workflows:read (Organization,\
    \ Bank, Customer)              |                                             \
    \  | workflows:execute (Bank, Customer)               |\n\n## Available Endpoints\n\
    \nThe available APIs for the [Identity](https://id.sandbox.cybrid.app/api/schema/swagger-ui),\
    \ [Organization](https://organization.sandbox.cybrid.app/api/schema/swagger-ui)\
    \ and [Bank](https://bank.sandbox.cybrid.app/api/schema/swagger-ui) API services\
    \ are listed below:\n\n| API Service  | Model                | API Endpoint Path\
    \              | Description                                                 \
    \                                      |\n|--------------|----------------------|--------------------------------|---------------------------------------------------------------------------------------------------|\n\
    | Identity     | Bank                 | /api/bank_applications         | Create\
    \ and list banks                                                             \
    \                |\n| Identity     | CustomerToken        | /api/customer_tokens\
    \           | Create customer JWT access tokens                              \
    \                                   |\n| Identity     | Organization         |\
    \ /api/organization_applications | Create and list organizations             \
    \                                                        |\n| Identity     | Organization\
    \         | /api/users                     | Create and list organization users\
    \                                                                |\n| Organization\
    \ | Organization         | /api/organizations             | APIs to retrieve and\
    \ update organization name                                                   \
    \  |\n| Bank         | Account              | /api/accounts                  |\
    \ Create and list accounts, which hold a specific asset for a customers      \
    \                       |\n| Bank         | Asset                | /api/assets\
    \                    | Get a list of assets supported by the platform (ex: BTC,\
    \ ETH)                                     |\n| Bank         | Bank          \
    \       | /api/banks                     | Create, update and list banks, the\
    \ parent to customers, accounts, etc                             |\n| Bank   \
    \      | Customer             | /api/customers                 | Create and list\
    \ customers                                                                  \
    \       |\n| Bank         | DepositAddress       | /api/deposit_addresses    \
    \     | Create, get and list deposit addresses                               \
    \                             |\n| Bank         | ExternalBankAccount  | /api/external_bank_accounts\
    \    | Create, get and list external bank accounts, which connect customer bank\
    \ accounts to the platform |\n| Bank         | ExternalWallet       | /api/external_wallets\
    \          | Create, get, list and delete external wallets, which connect customer\
    \ wallets to the platform     |\n| Bank         | IdentityVerification | /api/identity_verifications\
    \    | Create and list identity verifications, which are performed on customers\
    \ for KYC                  |\n| Bank         | Price                | /api/prices\
    \                    | Get the current prices for assets on the platform     \
    \                                            |\n| Bank         | Quote       \
    \         | /api/quotes                    | Create and list quotes, which are\
    \ required to execute trades                                      |\n| Bank  \
    \       | Symbol               | /api/symbols                   | Get a list of\
    \ symbols supported for trade (ex: BTC-USD)                                  \
    \         |\n| Bank         | Trade                | /api/trades             \
    \       | Create and list trades, which buy or sell cryptocurrency           \
    \                               |\n| Bank         | Transfer             | /api/transfers\
    \                 | Create, get and list transfers (e.g., funding, book)     \
    \                                         |\n| Bank         | Workflow       \
    \      | /api/workflows                 | Create, get and list workflows     \
    \                                                               |\n\n## Understanding\
    \ Object Models & Endpoints\n\n**Organizations**\n\nAn `Organization` is meant\
    \ to represent the organization partnering with Cybrid to use our platform.\n\n\
    An `Organization` typically does not directly interact with `customers`. Instead,\
    \ an Organization has one or more `banks`, which encompass the financial service\
    \ offerings of the platform.\n\n**Banks**\n\nA `Bank` is owned by an `Organization`\
    \ and can be thought of as an environment or container for `customers` and product\
    \ offerings. Banks are created in either `Sandbox` or `Production` mode, where\
    \ `Sandbox` is the environment that you would test, prototype and build in prior\
    \ to moving to `Production`.\n\nAn `Organization` can have multiple `banks`, in\
    \ either `Sandbox` or `Production` environments. A `Sandbox Bank` will be backed\
    \ by stubbed data and process flows. For instance, funding source transfer processes\
    \ as well as trades will be simulated rather than performed, however asset prices\
    \ are representative of real-world values. You have an unlimited amount of simulated\
    \ fiat currency for testing purposes.\n\n**Customers**\n\n`Customers` represent\
    \ your banking users on the platform. At present, we offer support for `Individuals`\
    \ as Customers.\n\n`Customers` must be verified (i.e., KYC'd) in our system before\
    \ they can play any part on the platform, which means they must have an associated\
    \ and a passing `Identity Verification`. See the Identity Verifications section\
    \ for more details on how a customer can be verified.\n\n`Customers` must also\
    \ have an `Account` to be able to transact, in the desired asset class. See the\
    \ Accounts APIs for more details on setting up accounts for the customer.\n"
  license:
    name: Apache-2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: https://www.cybrid.xyz/tos
  title: Cybrid Identity API
  version: v0.112.34
servers:
- description: Sandbox environment is for public use and uses simulated money movement
  url: https://id.sandbox.cybrid.app
- description: Production environment is for public use and uses real money movement
  url: https://id.production.cybrid.app
paths:
  /api/bank_applications:
    get:
      description: "Retrieve a list of bank OAuth2 applications.\n\nRequired scope:\
        \ **banks:read**"
      operationId: listBankApplications
      parameters:
      - description: The page index to retrieve.
        explode: true
        in: query
        name: page
        required: false
        schema:
          $ref: '#/components/schemas/ListRequestPage'
        style: form
      - description: The number of entities per page to return.
        explode: true
        in: query
        name: per_page
        required: false
        schema:
          $ref: '#/components/schemas/ListRequestPerPage'
        style: form
      - description: Bank guid to list applications for.
        explode: true
        in: query
        name: bank_guid
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationList'
          description: list bank applications
      security:
      - BearerAuth: []
        oauth2:
        - banks:read
      summary: List bank applications
      tags:
      - Bank Applications
      x-accepts: application/json
    post:
      description: "Creates a bank OAuth2 application.\n\nRequired scope: **bank_applications:execute**"
      operationId: createBankApplication
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostBankApplication'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationWithSecret'
          description: bank application created
      security:
      - BearerAuth: []
        oauth2:
        - bank_applications:execute
      summary: Create bank application
      tags:
      - Bank Applications
      x-content-type: application/json
      x-accepts: application/json
  /api/customer_tokens:
    post:
      description: "Creates a customer JWT access token.\n\nRequired scopes: **customers:write**\
        \ and **customers:read**"
      operationId: createCustomerToken
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostCustomerToken'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerToken'
          description: Customer token created
      security:
      - BearerAuth: []
        oauth2:
        - customers:write
      summary: Create customer access token
      tags:
      - Customer Tokens
      x-content-type: application/json
      x-accepts: application/json
  /api/organization_applications:
    get:
      description: "Retrieve a list of organization OAuth2 applications.\n\nRequired\
        \ scope: **organizations:read**"
      operationId: listOrganizationApplications
      parameters:
      - description: The page index to retrieve.
        explode: true
        in: query
        name: page
        required: false
        schema:
          $ref: '#/components/schemas/ListRequestPage'
        style: form
      - description: The number of entities per page to return.
        explode: true
        in: query
        name: per_page
        required: false
        schema:
          $ref: '#/components/schemas/ListRequestPerPage'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationList'
          description: list organization applications
      security:
      - BearerAuth: []
        oauth2:
        - organizations:read
      summary: List organization applications
      tags:
      - Organization Applications
      x-accepts: application/json
    post:
      description: "Create an organization OAuth2 application.\n\nRequired scope:\
        \ **organization_applications:execute**"
      operationId: createOrganizationApplication
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostOrganizationApplication'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationWithSecret'
          description: organization application created
      security:
      - BearerAuth: []
        oauth2:
        - organization_applications:execute
      summary: Create organization application
      tags:
      - Organization Applications
      x-content-type: application/json
      x-accepts: application/json
  /api/users:
    get:
      description: "Retrieve a list users.\n\nRequired scope: **users:read**"
      operationId: listUser
      parameters:
      - description: The page index to retrieve.
        explode: true
        in: query
        name: page
        required: false
        schema:
          $ref: '#/components/schemas/ListRequestPage'
        style: form
      - description: The number of entities per page to return.
        explode: true
        in: query
        name: per_page
        required: false
        schema:
          $ref: '#/components/schemas/ListRequestPerPage'
        style: form
      - description: Comma separated guids to list users for.
        explode: true
        in: query
        name: guid
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserList'
          description: list users
      security:
      - BearerAuth: []
        oauth2:
        - users:read
      summary: List users
      tags:
      - Users
      x-accepts: application/json
    post:
      description: |+
        Creates a user.

      operationId: createUser
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostUser'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: User created
      security:
      - BearerAuth: []
        oauth2:
        - users:execute
      summary: Create user
      tags:
      - Users
      x-content-type: application/json
      x-accepts: application/json
  /api/users/{user_guid}:
    delete:
      description: "Disables a user. User is not deleted.\n\nRequired scope: **users:execute**"
      operationId: disableUser
      parameters:
      - description: Identifier for the user.
        explode: false
        in: path
        name: user_guid
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: User disabled
        "401":
          content:
            application/json:
              examples:
                malformed_auth_header:
                  value:
                    status: 401
                    error_message: Authorization header is malformed.
                    message_code: authentication_malformed
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: "Unauthorized - Authentication failed, "
        "403":
          content:
            application/json:
              examples:
                invalid_scope:
                  value:
                    status: 403
                    error_message: "Invalid scopes. Required: users:execute"
                    message_code: invalid_scopes
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Invalid scope
        "404":
          content:
            application/json:
              examples:
                not_found:
                  value:
                    status: 404
                    error_message: user not found
                    message_code: not_found
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: user not found
      security:
      - BearerAuth: []
        oauth2:
        - users:execute
      summary: Disable User
      tags:
      - Users
      x-accepts: application/json
    get:
      description: "Retrieves a user.\n\nRequired scope: **users:read**"
      operationId: getUser
      parameters:
      - description: Identifier for the user.
        explode: false
        in: path
        name: user_guid
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: user found
        "401":
          content:
            application/json:
              examples:
                malformed_auth_header:
                  value:
                    status: 401
                    error_message: Authorization header is malformed.
                    message_code: authentication_malformed
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: "Unauthorized - Authentication failed, "
        "403":
          content:
            application/json:
              examples:
                invalid_scope:
                  value:
                    status: 403
                    error_message: "Invalid scopes. Required: users:read"
                    message_code: invalid_scopes
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Invalid scope
        "404":
          content:
            application/json:
              examples:
                not_found:
                  value:
                    status: 404
                    error_message: user not found
                    message_code: not_found
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: user not found
      security:
      - BearerAuth: []
        oauth2:
        - users:read
      summary: Get User
      tags:
      - Users
      x-accepts: application/json
components:
  schemas:
    Application:
      example:
        updated_at: 2000-01-23T04:56:07.000+00:00
        name: name
        created_at: 2000-01-23T04:56:07.000+00:00
        scopes:
        - accounts:execute
        - accounts:execute
        client_id: client_id
      properties:
        name:
          description: Name provided for the OAuth2 application.
          type: string
        client_id:
          description: The OAuth2 application's client ID.
          type: string
        scopes:
          description: List of the scopes granted to the OAuth2 application.
          items:
            enum:
            - accounts:execute
            - accounts:read
            - bank_applications:execute
            - banks:execute
            - banks:read
            - banks:write
            - customers:execute
            - customers:read
            - customers:write
            - deposit_addresses:execute
            - deposit_addresses:read
            - deposit_bank_accounts:execute
            - deposit_bank_accounts:read
            - external_bank_accounts:execute
            - external_bank_accounts:read
            - external_bank_accounts:write
            - external_wallets:execute
            - external_wallets:read
            - organization_applications:execute
            - organizations:read
            - organizations:write
            - prices:read
            - quotes:execute
            - quotes:read
            - trades:execute
            - trades:read
            - transfers:execute
            - transfers:read
            - users:execute
            - users:read
            - workflows:execute
            - workflows:read
            type: string
          type: array
        created_at:
          description: ISO8601 datetime the record was created at.
          format: date-time
          type: string
        updated_at:
          description: ISO8601 datetime the record was last updated at.
          format: date-time
          type: string
      required:
      - client_id
      - created_at
      - name
      - scopes
      type: object
    ApplicationWithSecret:
      allOf:
      - $ref: '#/components/schemas/Application'
      - $ref: '#/components/schemas/ApplicationWithSecret_allOf'
    ApplicationList:
      example:
        per_page: 1
        total: 0
        objects:
        - updated_at: 2000-01-23T04:56:07.000+00:00
          name: name
          created_at: 2000-01-23T04:56:07.000+00:00
          scopes:
          - accounts:execute
          - accounts:execute
          client_id: client_id
        - updated_at: 2000-01-23T04:56:07.000+00:00
          name: name
          created_at: 2000-01-23T04:56:07.000+00:00
          scopes:
          - accounts:execute
          - accounts:execute
          client_id: client_id
        page: 0
      properties:
        total:
          description: The total number of records available.
          type: integer
        page:
          description: The page index.
          minimum: 0
          type: integer
        per_page:
          description: The number of records per page returned.
          minimum: 1
          type: integer
        objects:
          description: Array of applications
          items:
            $ref: '#/components/schemas/Application'
          type: array
      required:
      - objects
      - page
      - per_page
      - total
      type: object
    ListRequestPage:
      description: The page index to retrieve.
      minimum: 0
      type: integer
    ListRequestPerPage:
      description: The number of entities per page to return.
      maximum: 100
      minimum: 1
      type: integer
    CustomerToken:
      example:
        access_token: access_token
      properties:
        access_token:
          description: The JWT access token for the customer.
          type: string
      type: object
    User:
      example:
        updated_at: 2000-01-23T04:56:07.000+00:00
        guid: guid
        created_at: 2000-01-23T04:56:07.000+00:00
        email: email
        username: username
      properties:
        guid:
          description: Auto-generated unique identifier for the user.
          maxLength: 32
          minLength: 32
          type: string
        username:
          description: The user's username.
          maxLength: 128
          minLength: 1
          type: string
        email:
          description: The user's email address.
          maxLength: 254
          minLength: 1
          type: string
        created_at:
          description: ISO8601 datetime the record was created at.
          format: date-time
          type: string
        updated_at:
          description: ISO8601 datetime the record was last updated at.
          format: date-time
          type: string
      type: object
    UserList:
      example:
        per_page: 1
        total: 0
        objects:
        - updated_at: 2000-01-23T04:56:07.000+00:00
          guid: guid
          created_at: 2000-01-23T04:56:07.000+00:00
          email: email
          username: username
        - updated_at: 2000-01-23T04:56:07.000+00:00
          guid: guid
          created_at: 2000-01-23T04:56:07.000+00:00
          email: email
          username: username
        page: 0
      properties:
        total:
          description: The total number of users available.
          type: integer
        page:
          description: The page index.
          minimum: 0
          type: integer
        per_page:
          description: The number of records per page returned.
          minimum: 1
          type: integer
        objects:
          description: Array of applications
          items:
            $ref: '#/components/schemas/User'
          type: array
      required:
      - objects
      - page
      - per_page
      - total
      type: object
    PostBankApplication:
      properties:
        name:
          description: Name for the bank application.
          maxLength: 128
          minLength: 1
          type: string
        bank_guid:
          description: Bank guid the application is associated to.
          maxLength: 32
          minLength: 32
          type: string
      required:
      - name
      type: object
    PostOrganizationApplication:
      properties:
        name:
          description: Name for the organization application.
          maxLength: 128
          minLength: 1
          type: string
      required:
      - name
      type: object
    PostCustomerToken:
      properties:
        customer_guid:
          description: Customer guid the access token is being generated for.
          maxLength: 32
          minLength: 32
          type: string
        scopes:
          description: List of the scopes requested for the access token.
          items:
            enum:
            - customers:read
            - customers:write
            - accounts:read
            - accounts:execute
            - prices:read
            - quotes:read
            - quotes:execute
            - trades:read
            - trades:execute
            - transfers:read
            - transfers:execute
            - external_bank_accounts:read
            - external_bank_accounts:write
            - external_bank_accounts:execute
            - external_wallets:read
            - external_wallets:execute
            - workflows:read
            - workflows:execute
            - deposit_addresses:read
            - deposit_addresses:execute
            - deposit_bank_accounts:read
            - deposit_bank_accounts:execute
            type: string
          minItems: 1
          type: array
          uniqueItems: true
      required:
      - customer_guid
      - scopes
      type: object
    PostUser:
      properties:
        email:
          description: The email address associated with the user.
          maxLength: 254
          minLength: 1
          type: string
      required:
      - email
      type: object
    ErrorResponse:
      properties:
        status:
          description: Status code for Http Request
          type: integer
        error_message:
          description: Error message
          type: string
        message_code:
          description: Message code for Error
          type: string
      required:
      - error_message
      - message_code
      - status
      type: object
    ApplicationWithSecret_allOf:
      properties:
        secret:
          description: The OAuth2 application's secret.
          type: string
      required:
      - secret
      type: object
  securitySchemes:
    oauth2:
      flows:
        clientCredentials:
          scopes:
            organizations:write: organizations write
            organizations:read: organizations read
            organization_applications:execute: organization_applications execute
            banks:write: banks write
            banks:read: banks read
            bank_applications:execute: bank_applications execute
            users:read: users read
            users:execute: users execute
            customers:write: customers write
            customers:read: customers read
          tokenUrl: https://id.sandbox.cybrid.app/oauth/token
      type: oauth2
    BearerAuth:
      bearerFormat: JWT
      scheme: bearer
      type: http

